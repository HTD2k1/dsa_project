{"version":3,"sources":["components/SudokuGenerator.js","components/SudokuSolver.js","components/Game/GameTable.js","components/Keypad/Keypad.js","components/Menu/FunctionOfTheGame.js","config/constants/gameData.js","components/Menu/NewGameBar.js","components/Menu/Menu.js","components/Status/StatusSection.js","components/Menu/WinnerBanner.js","components/testSudokuGenerator.js","components/GameSection.js","app/App.js","index.js"],"names":["board","checkBox","row","col","num","i","j","fillBox","Math","floor","random","check","checkCol","checkRow","fillRemaining","removeKDigits","count","cellId","parseInt","generateSudoku","mode","fillDiagonal","isInputValid","number","checkColumn","checkSubGrid","length","iRow","indexOf","gridRow","gridCol","solve","isFull","possibleBoards","validateBoards","backTrackingSearch","boards","shift","solvable","result","firstEmpty","findEmptyCell","empty_i","empty_j","undefined","newBoard","newRow","push","GameTable","props","console","log","useState","unchangeableSet","setUnchangeableSet","invalidSet","setInvalidSet","clickValue","clickCell","cellValue","useEffect","newSet","mySet","Set","add","createSetOfUnchangeableCells","orgPuzzle","tmpSet","createInValidSet","sudokuTableData","window","addEventListener","e","input","key","styleContainer","selected","backgroundColor","invalid","color","unchangeable","unchangeablyInvalid","className","map","suRow","suRowIndex","suValue","suColIndex","isInvalid","has","normalCell","rowId","colId","rowIndex","colIndex","isCellSelected","unchangeableCell","style","onClick","onSelectCell","onKeyDown","Keypad","onClickNumber","PrintFunctionOfTheGame","JSON","parse","stringify","undoCellStack","redoCellStack","getSolution","inputHookBoard","callSudokuSolver","onUndo","alert","tempStk","pop","temp","changeUndo","onRedo","changeRedo","onSolveSudoku","SUDOKU_DATA","NewGameBar","changeMode","onModeChange","MenuBar","React","isModeChange","setIsModeChange","state","table","sovledTable","stacks","StatusSection","solvedTable","WinnerBanner","GameSection","setValue","useForceUpdate","setSudokuTableData","setOrgPuzzle","setClickCell","setUndoCellStack","setRedoCellStack","sumRow","sumCol","sum","k","l","checkWinningCondition","value","rowIdx","colIdx","curCell","newCell","newSudokuTableData","concat","prevStack","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96d17e2f.chunk.js","sourcesContent":["//random fron 1-9\r\nfunction random() {\r\n  return Math.floor(Math.random() * 9 + 1);\r\n}\r\nvar board = [[]];\r\n/*for(let i = 0; i < 9; i++){\r\n  board[i] = 0;\r\n  for(let j = 0; j < 9; j++){\r\n      board[i][j] = 0;\r\n  }\r\n}*/\r\n\r\nfunction fillDiagonal() {\r\n  for (let i = 0; i < 9; i = i + 3) {\r\n    fillBox(i, i);\r\n  }\r\n}\r\n//checkBox\r\nfunction checkBox(row, col, num) {\r\n  for (let i = 0; i < 3; i++)\r\n    for (let j = 0; j < 3; j++)\r\n      if (board[row + i][col + j] == num) return false;\r\n  return true;\r\n}\r\n\r\n//fill 3x3\r\nfunction fillBox(row, col) {\r\n  let num;\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      do {\r\n        num = random();\r\n      } while (!checkBox(row, col, num));\r\n      board[row + i][col + j] = num;\r\n    }\r\n  }\r\n}\r\n//check valid\r\nfunction check(i, j, num) {\r\n  return (\r\n    checkCol(j, num) &&\r\n    checkRow(i, num) &&\r\n    checkBox(i - (i % 3), j - (j % 3), num)\r\n  );\r\n}\r\n//check row\r\nfunction checkRow(i, num) {\r\n  for (let j = 0; j < 9; j++) {\r\n    if (board[i][j] == num) return false;\r\n  }\r\n  return true;\r\n}\r\n//check column\r\nfunction checkCol(j, num) {\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[i][j] == num) return false;\r\n  }\r\n  return true;\r\n}\r\n//fill the remaining\r\nfunction fillRemaining(i, j) {\r\n  //    console.log(i);\r\n  //    console.log(j);\r\n  if (j >= 9 && i < 8) {\r\n    i = i + 1;\r\n    j = 0;\r\n  }\r\n  if (i >= 9 && j >= 9) return true;\r\n\r\n  if (i < 3) {\r\n    if (j < 3) j = 3;\r\n  } else if (i < 6) {\r\n    if (j == 3) {\r\n      j = j + 3;\r\n    }\r\n  } else {\r\n    if (j == 6) {\r\n      i = i + 1;\r\n      j = 0;\r\n      if (i >= 9) return true;\r\n    }\r\n  }\r\n\r\n  for (let num = 1; num <= 9; num++) {\r\n    if (check(i, j, num)) {\r\n      board[i][j] = num;\r\n      if (fillRemaining(i, j + 1)) return true;\r\n\r\n      board[i][j] = [];\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//remove degits\r\nfunction removeKDigits(count) {\r\n  while (count != 0) {\r\n    let cellId = Math.floor(Math.random() * 81 + 1);\r\n\r\n    // System.out.println(cellId);\r\n    // extract coordinates i  and j\r\n    let i = parseInt(cellId / 9);\r\n    let j = parseInt((cellId % 9) + 1);\r\n    if (i == 9) i -= 1;\r\n    if (j != 0) j = j - 1;\r\n\r\n    if (board[i][j] != 0) {\r\n      count--;\r\n      board[i][j] = 0;\r\n    }\r\n  }\r\n}\r\nexport const generateSudoku = (mode) => {\r\n  //create sudoku board\r\n  board = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ];\r\n  fillDiagonal();\r\n  fillRemaining(0, 3);\r\n  switch (mode) {\r\n    case \"EASY\":\r\n      removeKDigits(40);\r\n      break;\r\n\r\n    case \"MEDIUM\":\r\n      removeKDigits(48);\r\n      break;\r\n\r\n    case \"HARD\":\r\n      removeKDigits(56);\r\n      break;\r\n\r\n    case \"EXPERT\":\r\n      removeKDigits(64);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return board;\r\n};\r\n\r\nexport const createSetOfUnchangeableCells = (board) => {\r\n  if (board === undefined) return undefined;\r\n\r\n  const mySet = new Set();\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) if (board[i][j] !== 0) mySet.add(i + \",\" + j);\r\n  }\r\n  return mySet;\r\n};\r\n\r\n/*const mySet = createSetOfUnchangeableCells(test1)\r\n  const i = 0, j = 1\r\n  console.log(mySet)\r\n  console.log(mySet.has(i+\",\"+j))*/\r\n","const test1 = [\r\n  [1, 0, 0, 0, 0, 0, 0, 0, 7],\r\n  [0, 0, 0, 0, 8, 3, 5, 6, 0],\r\n  [0, 0, 8, 6, 0, 7, 0, 0, 0],\r\n  [8, 0, 0, 4, 0, 0, 1, 7, 0],\r\n  [4, 0, 5, 0, 0, 0, 2, 0, 6],\r\n  [0, 0, 6, 0, 3, 0, 0, 0, 0],\r\n  [0, 8, 4, 2, 0, 6, 9, 1, 5],\r\n  [0, 2, 1, 0, 5, 0, 0, 0, 0],\r\n  [0, 7, 9, 3, 1, 4, 6, 0, 8],\r\n];\r\n\r\nconst result = [\r\n  [1, 6, 3, 5, 2, 9, 8, 4, 7],\r\n  [9, 4, 7, 1, 8, 3, 5, 6, 2],\r\n  [2, 5, 8, 6, 4, 7, 3, 9, 1],\r\n  [8, 9, 2, 4, 6, 5, 1, 7, 3],\r\n  [4, 3, 5, 7, 9, 1, 2, 8, 6],\r\n  [7, 1, 6, 8, 3, 2, 4, 5, 9],\r\n  [3, 8, 4, 2, 7, 6, 9, 1, 5],\r\n  [6, 2, 1, 9, 5, 8, 7, 3, 4],\r\n  [5, 7, 9, 3, 1, 4, 6, 2, 8],\r\n];\r\nexport const callSudokuSolver = (inputHookBoard) => {\r\n  console.log(\"callSudokuSolver\"); // Rendering signals\r\n  //Stop executing if cannot receive any input\r\n  if (inputHookBoard === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  return solve(inputHookBoard);\r\n};\r\n\r\n//Validate input: Not really good solution\r\n\r\nexport const isInputValid = (board, number, row, col) => {\r\n  return (\r\n    checkRow(board, number, row, col) &&\r\n    checkColumn(board, number, row, col) &&\r\n    checkSubGrid(board, number, row, col)\r\n  );\r\n};\r\n\r\n//Check if number has already existed in current row\r\nconst checkRow = (board, number, row, col) => {\r\n  for (let i = 0; i < board.length; i++) {\r\n    if (i === col) continue;\r\n    else if (board[row][i] === number) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n//Check if number has already existed in current column\r\nconst checkColumn = (board, number, row, col) => {\r\n  for (const iRow of board) {\r\n    if (board.indexOf(iRow) === row) continue;\r\n    if (iRow[col] === number) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n//Check if number has already existed in current 3x3 region\r\nconst checkSubGrid = (board, number, row, col) => {\r\n  const gridRow = parseInt(row / 3) * 3;\r\n  const gridCol = parseInt(col / 3) * 3;\r\n\r\n  for (var i = gridRow; i < gridRow + 3; i++) {\r\n    for (var j = gridCol; j < gridCol + 3; j++) {\r\n      if (i === row && j === col) continue;\r\n      if (board[i][j] === number) return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst isFull = (board) => {\r\n  for (var i = 0; i < 9; i++)\r\n    for (var j = 0; j < 9; j++) {\r\n      if (board[i][j] === 0) return false;\r\n    }\r\n\r\n  return true;\r\n};\r\n\r\nconst solve = (board) => {\r\n  if (isFull(board)) return board;\r\n  else {\r\n    const possibleBoards = validateBoards(board);\r\n    return backTrackingSearch(possibleBoards);\r\n  }\r\n};\r\n\r\nconst backTrackingSearch = (boards) => {\r\n  if (boards.length < 1) {\r\n    return false;\r\n  } else {\r\n    const board = boards.shift();\r\n    const solvable = solve(board);\r\n    if (solvable !== false) return solvable;\r\n    else return backTrackingSearch(boards);\r\n  }\r\n};\r\n\r\nconst validateBoards = (board) => {\r\n  var result = [];\r\n  //Search for possibilities\r\n  const firstEmpty = findEmptyCell(board);\r\n  const empty_i = firstEmpty[0];\r\n  const empty_j = firstEmpty[1];\r\n  //Create possible boards\r\n\r\n  if (firstEmpty !== undefined) {\r\n    for (var num = 1; num < 10; num++)\r\n      if (isInputValid(board, num, empty_i, empty_j)) {\r\n        // Check if board is valid\r\n        const newBoard = [...board];\r\n        const newRow = [...board[empty_i]]; // Each element of 2d array is not DEEP COPIED, hence need another spread operator\r\n        newRow[empty_j] = num;\r\n        newBoard[empty_i] = newRow;\r\n        result.push(newBoard);\r\n      }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const findEmptyCell = (board) => {\r\n  for (var i = 0; i < board.length; i++)\r\n    for (var j = 0; j < board[i].length; j++) {\r\n      if (board[i][j] === 0) return [i, j];\r\n    }\r\n  return undefined;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { createSetOfUnchangeableCells } from \"../SudokuGenerator\";\r\nimport { isInputValid } from \"../SudokuSolver\";\r\nimport \"./GameTable.css\";\r\n\r\nfunction GameTable(props) {\r\n  console.log(\"GameTable_rendering\")\r\n  //State\r\n  const [unchangeableSet, setUnchangeableSet] = useState(null);\r\n  const [invalidSet, setInvalidSet] = useState(null);\r\n  const clickValue = props.clickCell.cellValue\r\n  useEffect(() => {\r\n    const newSet = createSetOfUnchangeableCells(props.orgPuzzle);\r\n    setUnchangeableSet(newSet);\r\n    console.log(\"Inside useEffect_unchangeableSet\", newSet);\r\n  }, [props.orgPuzzle]);\r\n\r\n  useEffect(() => {\r\n    const tmpSet = createInValidSet(props.sudokuTableData);\r\n    console.log(\"Inside useEffect_invalidSet\", tmpSet);\r\n    setInvalidSet(tmpSet);\r\n  }, [props.sudokuTableData]);\r\n\r\n\r\n  //Input handling \r\n  useEffect(() => {\r\n    window.addEventListener('keypress', e => {\r\n      console.log(\"clickCell\",props.clickCell)\r\n      const input = e.key\r\n      if(input <= 9 && input >= 1 && input !== clickValue)\r\n      console.log(e.key)\r\n    });\r\n  }, []);\r\n\r\n  const createInValidSet = (board) => {\r\n    const newSet = new Set();\r\n    for (let i = 0; i < board.length; i++) {\r\n      for (let j = 0; j < board[i].length; j++) {\r\n        if (board[i][j] === 0) continue;\r\n        if (isInputValid(board, board[i][j], i, j)) continue;\r\n        else {\r\n          newSet.add(i + \",\" + j);\r\n        }\r\n      }\r\n    }\r\n    return newSet;\r\n  };\r\n\r\n  /**\r\n   * @summary\r\n   * @param {number} rowId\r\n   * @param {number} colId\r\n   * @returns {boolean}\r\n   */\r\n  const isCellSelected = (rowId, colId) => {\r\n    const { rowIndex, colIndex } = props.clickCell;\r\n    if (rowIndex === null && colIndex === null) return false;\r\n    else if (rowId === rowIndex && colId === colIndex) return true;\r\n    else return false;\r\n  };\r\n\r\n  //Style\r\n  const styleContainer = {\r\n    selected: { backgroundColor: \"hsl(34, 26%, 89%)\" },\r\n    invalid: {\r\n      backgroundColor: \"hsl(7, 63%, 67%)\",\r\n      color: \"hsl(210, 88%, 56%)\",\r\n    },\r\n    unchangeable: { color: \"black\" },\r\n    unchangeablyInvalid: {\r\n      backgroundColor: \"hsl(7, 63%, 67%)\",\r\n      color: \"black\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <table className=\"game__board\">\r\n        <tbody>\r\n          {props.sudokuTableData &&\r\n            props.sudokuTableData.map((suRow, suRowIndex) => {\r\n              return (\r\n                <tr key={100000 + suRowIndex}>\r\n                  {suRow.map((suValue, suColIndex) => {\r\n                    // Style condition\r\n                    const isInvalid =\r\n                      invalidSet &&\r\n                      invalidSet.has(suRowIndex + \",\" + suColIndex);\r\n\r\n                    //Styling input cell\r\n                    let normalCell = isInvalid ? styleContainer.invalid : null;\r\n                    normalCell = isCellSelected(suRowIndex, suColIndex)\r\n                      ? styleContainer.selected\r\n                      : normalCell;\r\n                    //Styling unchangeable cell\r\n                    const unchangeableCell = isInvalid\r\n                      ? styleContainer.unchangeablyInvalid\r\n                      : styleContainer.unchangeable;\r\n\r\n                    if (\r\n                      unchangeableSet &&\r\n                      !unchangeableSet.has(suRowIndex + \",\" + suColIndex)\r\n                    )\r\n                      // checking if <td> is changeable\r\n                      return (\r\n                        //Input <td>\r\n                        <td\r\n                          style={normalCell}\r\n                          key={suRowIndex * 10 + suColIndex}\r\n                          onClick={() =>\r\n                            props.onSelectCell(suRowIndex, suColIndex, suValue)\r\n                          }\r\n                          onKeyDown={(e) => console.log(e.key)}\r\n\r\n                          className={`game__cell game__cell--filled`}\r\n                        >\r\n                          {suValue !== 0 ? suValue : null}\r\n                        </td>\r\n                      );\r\n                    //Unchangeable <td>\r\n                    else\r\n                      return (\r\n                        <td\r\n                          style={unchangeableCell}\r\n                          key={suRowIndex * 10 + suColIndex}\r\n                          className={`game__cell game__cell--filled`}\r\n                        >\r\n                          {suValue !== 0 ? suValue : null}\r\n                        </td>\r\n                      );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameTable;\r\n","import React from \"react\";\r\nimport \"./Keypad.css\";\r\n\r\nfunction Keypad(props) {\r\n  return (\r\n    <div className=\"status__numbers\">\r\n      {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((number) => {\r\n        return (\r\n          <div\r\n            className=\"status__number\"\r\n            key={number}\r\n            onClick={() => props.onClickNumber(number)}\r\n          >\r\n            {number}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Keypad;\r\n","import React, { useState } from \"react\";\r\nimport { callSudokuSolver } from \"../SudokuSolver\";\r\n\r\nfunction PrintFunctionOfTheGame(props) {\r\n  // Define prop\r\n  let sudokuTableData = JSON.parse(JSON.stringify(props.sudokuTableData)); // DEEP COPY 2d array\r\n  let undoCellStack = props.undoCellStack;\r\n  let redoCellStack = props.redoCellStack;\r\n\r\n  /**\r\n   * @summary Call SudokuSolver to get the solution\r\n   * @returns {Array} 9x9 array\r\n   * @author Tien Dat\r\n   */\r\n  const getSolution = () => {\r\n    return callSudokuSolver(sudokuTableData);\r\n  };\r\n\r\n  /**\r\n   * @summary Move value of top undoCellStack to current sudokuTable, move value of current sudokuTable to redoCellStack\r\n   * @returns {Array} array of stacks and sudokuTable\r\n   * @author Tien Dat\r\n   */\r\n  const changeUndo = () => {\r\n    if (undoCellStack.length === 0) {\r\n      alert(\"Can not undo\");\r\n    } else {\r\n      //Pop top stack\r\n      let tempStk = undoCellStack.pop();\r\n\r\n      //Swap sudokuTable's current value with tempStk.cellValue\r\n      let temp = tempStk.cellValue;\r\n      tempStk.cellValue = sudokuTableData[tempStk.rowIndex][tempStk.colIndex];\r\n      sudokuTableData[tempStk.rowIndex][tempStk.colIndex] = temp;\r\n\r\n      //Push stack\r\n      redoCellStack.push(tempStk);\r\n    }\r\n    //Return\r\n    return [undoCellStack, redoCellStack, sudokuTableData];\r\n  };\r\n\r\n  /**\r\n   * @summary Move value of top redoCellStack to current sudokuTable, move value of current sudokuTable to undoCellStack\r\n   * @returns {Array} array of stacks and sudokuTable\r\n   * @author Tien Dat\r\n   */\r\n  const changeRedo = () => {\r\n    if (redoCellStack.length === 0) {\r\n      alert(\"Can not redo\");\r\n    } else {\r\n      //Handle Stacks\r\n      const tempStk = redoCellStack.pop();\r\n      const { rowIndex, colIndex, cellValue } = tempStk;\r\n      undoCellStack.push({\r\n        rowIndex: rowIndex,\r\n        colIndex: colIndex,\r\n        cellValue: sudokuTableData[rowIndex][colIndex],\r\n      });\r\n\r\n      //Handle sudokuTable\r\n      sudokuTableData[rowIndex][colIndex] = cellValue;\r\n    }\r\n    return [undoCellStack, redoCellStack, sudokuTableData];\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"undo\" onClick={() => props.onUndo(changeUndo())}>\r\n        Undo\r\n      </button>\r\n      <button className=\"redo\" onClick={() => props.onRedo(changeRedo())}>\r\n        Redo\r\n      </button>\r\n      <button\r\n        className=\"solve\"\r\n        onClick={() => props.onSolveSudoku(getSolution())}\r\n      >\r\n        Solve\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PrintFunctionOfTheGame;\r\n","export const SUDOKU_DATA = [\r\n  [1, 0, 0, 0, 0, 0, 0, 0, 7],\r\n  [0, 0, 0, 0, 8, 3, 5, 6, 0],\r\n  [0, 0, 8, 6, 0, 7, 0, 0, 0],\r\n  [8, 0, 0, 4, 0, 0, 1, 7, 0],\r\n  [4, 0, 5, 0, 0, 0, 2, 0, 6],\r\n  [0, 0, 6, 0, 3, 0, 0, 0, 0],\r\n  [0, 8, 4, 2, 0, 6, 9, 1, 5],\r\n  [0, 2, 1, 0, 5, 0, 0, 0, 0],\r\n  [0, 7, 9, 3, 1, 4, 6, 0, 8],\r\n];\r\nexport const MEDIUM_SUDOKU = [\r\n  [1, 1, 1, 1, 1, 1, 1, 1, 7],\r\n  [0, 0, 0, 0, 8, 3, 5, 6, 0],\r\n  [0, 0, 8, 6, 0, 7, 0, 0, 0],\r\n  [8, 0, 0, 4, 0, 0, 1, 7, 0],\r\n  [4, 0, 5, 0, 0, 0, 2, 0, 6],\r\n  [0, 0, 6, 0, 3, 0, 0, 0, 0],\r\n  [0, 8, 4, 2, 0, 6, 9, 1, 5],\r\n  [0, 2, 1, 0, 5, 0, 0, 0, 0],\r\n  [0, 7, 9, 3, 1, 4, 6, 0, 8],\r\n];\r\nexport const HARD_SUDOKU = [\r\n  [2, 2, 2, 2, 2, 2, 2, 2, 7],\r\n  [0, 0, 0, 0, 8, 3, 5, 6, 0],\r\n  [0, 0, 8, 6, 0, 7, 0, 0, 0],\r\n  [8, 0, 0, 4, 0, 0, 1, 7, 0],\r\n  [4, 0, 5, 0, 0, 0, 2, 0, 6],\r\n  [0, 0, 6, 0, 3, 0, 0, 0, 0],\r\n  [0, 8, 4, 2, 0, 6, 9, 1, 5],\r\n  [0, 2, 1, 0, 5, 0, 0, 0, 0],\r\n  [0, 7, 9, 3, 1, 4, 6, 0, 8],\r\n];\r\n\r\nexport const EXPERT_SUDOKU = [\r\n  [3, 3, 3, 3, 3, 3, 3, 3, 7],\r\n  [0, 0, 0, 0, 8, 3, 5, 6, 0],\r\n  [0, 0, 8, 6, 0, 7, 0, 0, 0],\r\n  [8, 0, 0, 4, 0, 0, 1, 7, 0],\r\n  [4, 0, 5, 0, 0, 0, 2, 0, 6],\r\n  [0, 0, 6, 0, 3, 0, 0, 0, 0],\r\n  [0, 8, 4, 2, 0, 6, 9, 1, 5],\r\n  [0, 2, 1, 0, 5, 0, 0, 0, 0],\r\n  [0, 7, 9, 3, 1, 4, 6, 0, 8],\r\n];\r\n\r\nconst Hardesttest = [\r\n  [8, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 3, 6, 0, 0, 0, 0, 0],\r\n  [0, 7, 0, 0, 9, 0, 2, 0, 0],\r\n  [0, 5, 0, 0, 0, 7, 0, 0, 0],\r\n  [0, 0, 0, 0, 4, 5, 7, 0, 0],\r\n  [0, 0, 0, 1, 0, 0, 0, 3, 0],\r\n  [0, 0, 1, 0, 0, 0, 0, 6, 8],\r\n  [0, 0, 8, 5, 0, 0, 0, 1, 0],\r\n  [0, 9, 0, 0, 0, 0, 4, 0, 0],\r\n];\r\n\r\nconst against =[\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 3, 0, 8, 5],\r\n  [0, 0, 1, 0, 2, 0, 0, 0, 0],\r\n  [0, 0, 0, 5, 0, 7, 0, 0, 0],\r\n  [0, 0, 4, 0, 0, 0, 1, 0, 0],\r\n  [0, 9, 0, 0, 0, 0, 0, 0, 0],\r\n  [5, 0, 0, 0, 0, 0, 0, 7, 3],\r\n  [0, 0, 2, 0, 1, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 4, 0, 0, 0, 9],\r\n]\r\n","import { generateSudoku } from \"../SudokuGenerator\";\r\nimport React from \"react\";\r\nimport {\r\n  SUDOKU_DATA,\r\n  MEDIUM_SUDOKU,\r\n  HARD_SUDOKU,\r\n  EXPERT_SUDOKU,\r\n} from \"../../config/constants/gameData\";\r\nfunction NewGameBar(props) {\r\n  const changeMode = (mode) => {\r\n    /*switch (mode) {\r\n      case \"EASY\":\r\n        return SUDOKU_DATA;\r\n\r\n      case \"MEDIUM\":\r\n        return MEDIUM_SUDOKU;\r\n\r\n      case \"HARD\":\r\n        return HARD_SUDOKU;\r\n\r\n      case \"EXPERT\":\r\n        return EXPERT_SUDOKU;\r\n      default:\r\n        break;\r\n    }*/\r\n    return generateSudoku(mode);\r\n  };\r\n\r\n  return (\r\n    <div className=\"newGameBar\">\r\n      <h1 className=\"header\">Choose game's mode</h1>\r\n      <button\r\n        className=\"easy\"\r\n        onClick={() => props.onModeChange(changeMode(\"EASY\"))}\r\n      >\r\n        Easy\r\n      </button>\r\n      <button\r\n        className=\"medium\"\r\n        onClick={() => props.onModeChange(changeMode(\"MEDIUM\"))}\r\n      >\r\n        Medium\r\n      </button>\r\n      <button\r\n        className=\"hard\"\r\n        onClick={() => props.onModeChange(changeMode(\"HARD\"))}\r\n      >\r\n        Hard\r\n      </button>\r\n      <button\r\n        className=\"expert\"\r\n        onClick={() => props.onModeChange(changeMode(\"EXPERT\"))}\r\n      >\r\n        Expert\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewGameBar;\r\n","import React from \"react\";\r\nimport PrintFunctionOfTheGame from \"./FunctionOfTheGame\";\r\nimport \"./Menu.css\";\r\nimport NewGameBar from \"./NewGameBar\";\r\n\r\nfunction MenuBar(props) {\r\n  const sudokuTableData = props.sudokuTableData;\r\n  const [isModeChange, setIsModeChange] = React.useState(false);\r\n\r\n  const handleModeChange = () => {\r\n    setIsModeChange((state) => !state);\r\n  };\r\n\r\n  return (\r\n    <div className=\"menuGame\">\r\n      <button className=\"newGame\" onClick={handleModeChange}>\r\n        New game\r\n      </button>\r\n      {isModeChange === true ? (\r\n        <NewGameBar onModeChange={(table) => props.onModeChange(table)} />\r\n      ) : (\r\n        <PrintFunctionOfTheGame\r\n          //Data\r\n          sudokuTableData={sudokuTableData}\r\n          redoCellStack={props.redoCellStack}\r\n          undoCellStack={props.undoCellStack}\r\n          //Handling\r\n          onSolveSudoku={(sovledTable) => props.onSolveSudoku(sovledTable)}\r\n          onUndo={(stacks) => props.onUndo(stacks)}\r\n          onRedo={(stacks) => props.onRedo(stacks)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MenuBar;\r\n","import React from \"react\";\r\nimport Keypad from \"../Keypad/Keypad\";\r\nimport MenuBar from \"../Menu/Menu\";\r\n\r\nimport \"./StatusSection.css\";\r\n\r\nfunction StatusSection(props) {\r\n  const sudokuTableData = props.sudokuTableData;\r\n  return (\r\n    <div className=\"status\">\r\n      <MenuBar\r\n        //Data\r\n        sudokuTableData={sudokuTableData}\r\n        undoCellStack={props.undoCellStack}\r\n        redoCellStack={props.redoCellStack}\r\n        //Handling game Functionality\r\n        onSolveSudoku={(solvedTable) => props.onSolveSudoku(solvedTable)}\r\n        onUndo={(stacks) => props.onUndo(stacks)}\r\n        onRedo={(stacks) => props.onRedo(stacks)}\r\n        //Handle change game Mode\r\n        onModeChange={(table) => props.onModeChange(table)}\r\n      />\r\n\r\n      <Keypad onClickNumber={(number) => props.onClickNumber(number)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatusSection;\r\n","import React from \"react\";\r\nimport \"./WinnerBanner.css\";\r\n\r\nfunction WinnerBanner(props) {\r\n  return (\r\n    <div className=\"banner\">\r\n      <div className=\"congra-and-pic\">\r\n        <text>Congratulation!!!</text>\r\n        {/* <img className='img-firework' src=\"images/firework3.png\" alt=\"\"/> */}\r\n      </div>\r\n      <p>You've won the game.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WinnerBanner;\r\n","//random fron 1-9\r\nfunction random() {\r\n  return Math.floor(Math.random() * 9 + 1);\r\n}\r\n//create sudoku board\r\nvar board = [\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\n/*for(let i = 0; i < 9; i++){\r\n    board[i] = 0;\r\n    for(let j = 0; j < 9; j++){\r\n        board[i][j] = 0;\r\n    }\r\n}*/\r\n\r\nfunction fillDiagonal() {\r\n  for (let i = 0; i < 9; i = i + 3) {\r\n    fillBox(i, i);\r\n  }\r\n}\r\n//checkBox\r\nfunction checkBox(row, col, num) {\r\n  for (let i = 0; i < 3; i++)\r\n    for (let j = 0; j < 3; j++)\r\n      if (board[row + i][col + j] == num) return false;\r\n  return true;\r\n}\r\n\r\n//fill 3x3\r\nfunction fillBox(row, col) {\r\n  let num;\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      do {\r\n        num = random();\r\n      } while (!checkBox(row, col, num));\r\n      board[row + i][col + j] = num;\r\n    }\r\n  }\r\n}\r\n//check valid\r\nfunction check(i, j, num) {\r\n  return (\r\n    checkCol(j, num) &&\r\n    checkRow(i, num) &&\r\n    checkBox(i - (i % 3), j - (j % 3), num)\r\n  );\r\n}\r\n//check row\r\nfunction checkRow(i, num) {\r\n  for (let j = 0; j < 9; j++) {\r\n    if (board[i][j] == num) return false;\r\n  }\r\n  return true;\r\n}\r\n//check column\r\nfunction checkCol(j, num) {\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[i][j] == num) return false;\r\n  }\r\n  return true;\r\n}\r\n//fill the remaining\r\nfunction fillRemaining(i, j) {\r\n  //    console.log(i);\r\n  //    console.log(j);\r\n  if (j >= 9 && i < 8) {\r\n    i = i + 1;\r\n    j = 0;\r\n  }\r\n  if (i >= 9 && j >= 9) return true;\r\n\r\n  if (i < 3) {\r\n    if (j < 3) j = 3;\r\n  } else if (i < 6) {\r\n    if (j == 3) {\r\n      j = j + 3;\r\n    }\r\n  } else {\r\n    if (j == 6) {\r\n      i = i + 1;\r\n      j = 0;\r\n      if (i >= 9) return true;\r\n    }\r\n  }\r\n\r\n  for (let num = 1; num <= 9; num++) {\r\n    if (check(i, j, num)) {\r\n      board[i][j] = num;\r\n      if (fillRemaining(i, j + 1)) return true;\r\n\r\n      board[i][j] = [];\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//remove degits\r\nfunction removeKDigits(count) {\r\n  while (count != 0) {\r\n    let cellId = Math.floor(Math.random() * 80 + 1);\r\n\r\n    // System.out.println(cellId);\r\n    // extract coordinates i  and j\r\n    let i = parseInt(cellId / 9);\r\n    let j = parseInt(cellId % 9);\r\n    console.log(i + \", \" + j);\r\n    if (j != 0) j = j - 1;\r\n\r\n    if (board[i][j] != 0) {\r\n      count--;\r\n      board[i][j] = 0;\r\n    }\r\n  }\r\n}\r\nexport const checkWinningCondition = (board) => {\r\n    console.log('board', board)\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) if (board[i][j] == 0) return false;\r\n  }\r\n  for (let i = 0; i < 9; i++) {\r\n    let sumRow = 0;\r\n    let sumCol = 0;\r\n    for (let j = 0; j < 9; j++) {\r\n      sumRow += board[i][j];\r\n      sumCol += board[i][j];\r\n    }\r\n    if (sumRow != 45 && sumCol != 45) return false;\r\n  }\r\n  for (let i = 0; i < 9; i += 3) {\r\n    for (let j = 0; j < 9; j += 3) {\r\n      let sum = 0;\r\n      for (let k = 0; k < 3; k++) {\r\n        for (let l = 0; l < 3; l++) sum += board[i + k][j + l];\r\n      }\r\n      if (sum != 45) return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\nfillDiagonal();\r\nfillRemaining(0, 3);\r\nremoveKDigits(10);\r\n// console.log(board);\r\n// console.log(checkWinningCondition());\r\n","import React, { useState } from \"react\";\r\nimport GameTable from \"./Game/GameTable\";\r\nimport Keypad from \"./Keypad/Keypad\";\r\n\r\nimport \"./GameSection.css\";\r\nimport StatusSection from \"./Status/StatusSection\";\r\nimport { SUDOKU_DATA } from \"../config/constants/gameData\";\r\nimport { callSudokuSolver, isInputValid } from \"./SudokuSolver\";\r\nimport WinnerBanner from \"./Menu/WinnerBanner\";\r\nimport { checkWinningCondition } from \"../components/testSudokuGenerator\";\r\n\r\nfunction useForceUpdate() {\r\n  const [value, setValue] = React.useState(0); // integer state\r\n  return () => setValue((value) => value + 1); // update the state to force render\r\n}\r\n\r\nfunction GameSection(props) {\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  // Table data\r\n  const [sudokuTableData, setSudokuTableData] = React.useState(SUDOKU_DATA);\r\n  const [orgPuzzle, setOrgPuzzle] = useState(SUDOKU_DATA);\r\n\r\n  const [clickCell, setClickCell] = React.useState({\r\n    rowIndex: null,\r\n    colIndex: null,\r\n    cellValue: null,\r\n  });\r\n\r\n  const [undoCellStack, setUndoCellStack] = React.useState([]);\r\n  const [redoCellStack, setRedoCellStack] = React.useState([]);\r\n\r\n  /**\r\n   * @summary Input the number user selects for the current selected cell\r\n   * @param {*} num\r\n   */\r\n  const onClickNumber = (num) => {\r\n    // if (\r\n    //   (clickCell.rowIndex == null &&\r\n    //     clickCell.colIndex == null &&\r\n    //     clickCell.cellValue !== 0) ||\r\n    //   (clickCell.rowIndex == null &&\r\n    //     clickCell.colIndex == null &&\r\n    //     clickCell.cellValue == null)\r\n    // )\r\n    //   return;\r\n\r\n    // Change value using temporary variables\r\n    let curCell = { ...clickCell }; //Cannot use below method as it creates pointer to the same object\r\n    let newCell = JSON.parse(JSON.stringify(clickCell));\r\n    newCell.cellValue = num;\r\n    let newSudokuTableData = [].concat(sudokuTableData);\r\n\r\n    newSudokuTableData[newCell.rowIndex][newCell.colIndex] = newCell.cellValue;\r\n\r\n    // Update new state\r\n    setUndoCellStack((prevStack) => [...prevStack, curCell]);\r\n    setRedoCellStack([]); //compulsory\r\n\r\n    setClickCell(newCell);\r\n    setSudokuTableData(newSudokuTableData);\r\n  };\r\n\r\n  /**\r\n   * @summary Store current cell that user selects\r\n   * @param {*} rowIdx\r\n   * @param {*} colIdx\r\n   * @param {*} value\r\n   */\r\n  const onSelectCell = (rowIdx, colIdx, value) => {\r\n    setClickCell({ rowIndex: rowIdx, colIndex: colIdx, cellValue: value });\r\n  };\r\n\r\n  /**\r\n   * @summary Handle SOLVE functionality\r\n   * @param {Array} solvedTable\r\n   * @author Tien Dat\r\n   */\r\n  const handleSolve = (solvedTable) => {\r\n    switch (solvedTable) {\r\n      case false:\r\n        alert(\"The puzzle is unsolvable\");\r\n        break;\r\n      case undefined:\r\n        alert(\"Cannot receive input sudoku table\");\r\n        break;\r\n      default:\r\n        setSudokuTableData(solvedTable);\r\n    }\r\n  };\r\n  /**\r\n   * @summary Handle UNDO functionality\r\n   * @param {Array} stacks: stack[0] = undoCellStack, stack[1] = redoCellStack, stack[2] = sudokuTableData\r\n   * @author Tien Dat\r\n   */\r\n  const handleUndo = (stacks) => {\r\n    //Update state\r\n    setUndoCellStack(stacks[0]);\r\n    setRedoCellStack(stacks[1]);\r\n    setSudokuTableData(stacks[2]);\r\n  };\r\n  /**\r\n   * @summary Handle REDO functionality\r\n   * @param {Array} stacks: stack[0] = undoCellStack, stack[1] = redoCellStack, stack[2] = sudokuTableData\r\n   * @author Tien Dat\r\n   */\r\n  const handleRedo = (stacks) => {\r\n    //Update state\r\n    setUndoCellStack(stacks[0]);\r\n    setRedoCellStack(stacks[1]);\r\n    setSudokuTableData(stacks[2]);\r\n  };\r\n\r\n  /**\r\n   * @summary Change Game mode\r\n   * @param {Array} table\r\n   * @author Tien Dat\r\n   */\r\n  const handleModeChange = (table) => {\r\n    setSudokuTableData(table);\r\n    setOrgPuzzle(table);\r\n  };\r\n\r\n  const renderGameSection = () => {\r\n    if (orgPuzzle) {\r\n      if (checkWinningCondition(orgPuzzle)) {\r\n        return <WinnerBanner />;\r\n      } else {\r\n        return (\r\n          <GameTable\r\n            sudokuTableData={sudokuTableData}\r\n            orgPuzzle={orgPuzzle}\r\n            onSelectCell={(row, col, value) => onSelectCell(row, col, value)}\r\n            clickCell={clickCell}\r\n          />\r\n        );\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"innercontainer\">\r\n      {renderGameSection()}\r\n      <StatusSection\r\n        //Data\r\n        sudokuTableData={sudokuTableData}\r\n        undoCellStack={undoCellStack}\r\n        redoCellStack={redoCellStack}\r\n        //Game FUNCTIONALITY handling\r\n        onClickNumber={(number) => onClickNumber(number)}\r\n        onSolveSudoku={handleSolve}\r\n        onUndo={handleUndo}\r\n        onRedo={handleRedo}\r\n        //Game mode handling\r\n        onModeChange={handleModeChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameSection;\r\n","import GameSection from '../components/GameSection';\r\nimport WinnerBanner from '../components/Menu/WinnerBanner';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GameSection/>\r\n      {/* <WinnerBanner /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}